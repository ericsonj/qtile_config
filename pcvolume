#!/usr/bin/env python

import argparse
import pulsectl
import sys

def normalize(sinks):
    if sinks[0].mute:
        return 0

    vols = []
    for sink in sinks:
        vols.append(pulse.volume_get_all_chans(sink))

    for sink in sinks:
        pulse.volume_set_all_chans(sink, min(vols))
     
    return round(min(vols), 2)

parser = argparse.ArgumentParser(description='Pulse Volume Control')
parser.add_argument('vol', nargs='?', default=0, help="Raise or lower volume [1..100]")
parser.add_argument('--volume', '-v', type=int, help="Set volume [1..100]")
parser.add_argument('--mute', action='store_true', help="Toggle mute")

args = parser.parse_args()

pulse = pulsectl.Pulse('qtile')
sinks = pulse.sink_list()

if args.volume:
    if args.volume > 0 and args.volume <= 100:
        for sink in sinks:
            pulse.volume_set_all_chans(sink, round(float(args.volume)/100, 2))
    sys.exit()

if args.mute:
    for sink in sinks:
        pulse.mute(sink, mute=(not sink.mute))
    sys.exit()

vol = int(args.vol)

if vol > 0 and vol <= 100:
    print("Volume Raise")
elif vol >= -100 and vol < 0:
    print("Volume Lower")
else:
    volp = int(normalize(sinks)*100);
    svol = 'off' if volp == 0 else str(volp)+'%' 
    print('['+svol+']')

normalize(sinks)
for sink in sinks:
    pulse.volume_change_all_chans(sink, round(float(vol)/100, 2))     